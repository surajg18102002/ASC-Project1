- name: Scan Confluence Repository and Upload to KTSURAJ
  hosts: localhost
  gather_facts: no
  vars:
    confluence_url: "https://surajg18102002.atlassian.net/wiki"
    confluence_token: "c3VyYWpnMTgxMDIwMDJAZ21haWwuY29tOkFUQVRUM3hGZkdGMGxLM0ItRzNXUXVTZF9FeVVud29qTFFkNXVvUG5lVmJnLWlYWlM0NXBIUm9fcDNVZ2RSQXdKWF95ZkxZV1FfUUFjdEZpY3VTel9jMWt2ODVTQjhXaUFQVktQcmVRMElRUWhnbTV5Mkt2bGlTQTdWZV9YR1dpVUx6NTlMSE9SekRCczcwOUFTRUcxc2VLVXA5a1JDXzdTZ3Z4VDAxR3p3NFp4SFZHZWUxOTZEUT1GNzM3NDMwOQ=="  # Replace with actual token
    new_space_key: "KTSURAJ"
    new_space_name: "KT Suraj"
    metadata_file: "/tmp/confluence_metadata.json"

  tasks:
    - name: Fetch all spaces from Confluence
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/space?limit=100"
        method: GET
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
        status_code: [200]
      register: spaces_data

    - name: Fetch all pages in each space
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/space/{{ item.key }}/content?type=page&limit=100"
        method: GET
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
        status_code: [200]
      loop: "{{ spaces_data.json.results }}"
      register: pages_data

    - name: Fetch attachments for each page
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/content/{{ item.id }}/child/attachment"
        method: GET
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
        status_code: [200]
      loop: "{{ pages_data.results | map(attribute='json.results') | flatten }}"
      register: attachments_data
      when: item.id is defined

    - name: Store metadata in JSON file
      copy:
        content: "{{ {'spaces': spaces_data.json, 'pages': pages_data.results, 'attachments': attachments_data.results} | to_nice_json }}"
        dest: "{{ metadata_file }}"

    - name: Check if KTSURAJ space exists
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/space?spaceKey={{ new_space_key }}"
        method: GET
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
        status_code: [200, 404]
      register: check_space

    - name: Create KTSURAJ space if it does not exist
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/space"
        method: POST
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body:
          key: "{{ new_space_key }}"
          name: "{{ new_space_name }}"
          description:
            plain:
              value: "Automated knowledge transfer space for extracted documents"
              representation: "plain"
        status_code: [200, 201]
      when: check_space.json.size == 0

    - name: Upload metadata JSON to KTSURAJ space
      ansible.builtin.uri:
        url: "{{ confluence_url }}/rest/api/content"
        method: POST
        headers:
          Authorization: "{{ confluence_token }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "page"
          title: "Extracted Metadata"
          space:
            key: "{{ new_space_key }}"
          body:
            storage:
              value: "<pre>{{ lookup('file', metadata_file) }}</pre>"
              representation: "storage"
        status_code: [200, 201]

