- name: Handle Datadog Alerts and Manage ServiceNow Cases
  hosts: localhost
  gather_facts: yes  # Required for ansible_date_time
  vars:
    datadog:
      api_key: "9cae63ce64fcea730e71e8a71e572beb"
      app_key: "cca1ca0fe667e3ebd44f4bcc01c7f042a99b1831"
      api_url: "https://api.us5.datadoghq.com/api/v1/monitor"
 
    service_now:
      instance: "dev247928.service-now.com"
      username: "admin"
      password: "%ml4Vs9RXE/s"
      table: "incident"
      impact: "2"
      urgency: "2"
 
    recovery_window: 300  # 5 minutes
    processed_alerts: []  # List to store processed alert IDs

  tasks:
 
    - name: Fetch alerts from Datadog
      ansible.builtin.uri:
        url: "{{ datadog.api_url }}"
        method: GET
        headers:
          DD-API-KEY: "{{ datadog.api_key }}"
          DD-APPLICATION-KEY: "{{ datadog.app_key }}"
        return_content: yes
      register: datadog_alerts
 
    - name: Debug Datadog API Response
      debug:
        var: datadog_alerts
 
    - name: Create ServiceNow case for each new triggered alert
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/u_case1"
        method: POST
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          u_impact: "{{ service_now.impact }}"
          u_urgency: "{{ service_now.urgency }}"
          u_short_description: "Datadog Alert - {{ item.name }}"
          u_description: "Alert triggered in Datadog at {{ ansible_date_time.iso8601 }}"
        status_code: [200, 201]
      loop: "{{ datadog_alerts.json }}"
      when: >
        item.overall_state in ["Alert", "OK"] and
        item.id not in processed_alerts
      register: created_cases
      vars:
        processed_alerts: "{{ processed_alerts + [item.id] }}"
 
    - name: Wait for recovery window (5 minutes)
      ansible.builtin.pause:
        seconds: "{{ recovery_window }}"
 
    - name: Check if alert is recovered
      ansible.builtin.uri:
        url: "{{ datadog.api_url }}"
        method: GET
        headers:
          DD-API-KEY: "{{ datadog.api_key }}"
          DD-APPLICATION-KEY: "{{ datadog.app_key }}"
        return_content: yes
      register: updated_alerts
 
    - name: Resolve all open ServiceNow cases if no active alerts exist
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/u_case1/{{ item.sys_id }}"
        method: PATCH
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          state: "resolved"
          short_description: "Datadog Alert - Case Resolved"
          description: "No active alerts found. Resolving case."
        status_code: [200, 201]
      loop: "{{ open_cases.json.result }}"
      when: updated_alerts.json | length == 0
 
    - name: Convert case into an incident if alert is still active
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.table }}"
        method: POST
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          state: "in_progress"
          short_description: "Datadog Alert - {{ item.name }} (Incident Created)"
          description: "The alert is still active after the recovery window. Escalating to an incident."
        status_code: [200, 201]
      loop: "{{ updated_alerts.json }}"
      when: >
        item.overall_state in ["Alert", "OK"] and
        item.id in processed_alerts
